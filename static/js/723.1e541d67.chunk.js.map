{"version":3,"file":"static/js/723.1e541d67.chunk.js","mappings":"wMAIMA,EAAW,SAACC,GAChB,OAA0BC,EAAAA,EAAAA,UAASD,GAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAkBA,MAAO,CAACH,EAAOE,EAAUC,EAhBJ,SAACC,GACpB,IAAMC,EAAaD,EAAME,OAAON,MAEhCG,GAAY,GAERE,EAAWE,QAXM,IAerBN,EAASI,EACV,EAEkB,WACjBJ,EAAS,GACV,EAGF,E,kBC6GD,EAxHyB,SAAC,GAAkB,IAAhBO,EAAe,EAAfA,SACpBC,GAAWC,EAAAA,EAAAA,MAEjB,EAMIb,EAAS,IANb,eACEc,EADF,KAEEC,EAFF,KAGEC,EAHF,KAIEC,EAJF,KAKEC,EALF,KAQA,EAMIlB,EAAS,IANb,eACEmB,EADF,KAEEC,EAFF,KAGEC,EAHF,KAIEC,EAJF,KAKEC,EALF,KAQMC,EAAe,WACnB,IAAMC,EAAeX,EAAMY,OAE3B,GAAKD,EAIL,OAFAT,GAAkBS,GAEXA,EAAaf,MACrB,EAUKiB,GAAWC,EAAAA,EAAAA,QAAyB,OAE1CC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACd,UAAAF,EAASG,eAAT,SAAkBC,OACnB,GAAE,IAEH,IAAMC,EAAa,WACjBpB,EAAS,CAACqB,KAAMC,EAAAA,EAAAA,iBAAyBC,SAAS,GACnD,EAEKC,EAAe,SAACC,GACpBA,EAAEC,iBAEF,IAAMC,EAAiB,CACrBC,GAAIC,KAAKC,MACTC,KAAM7B,EAAMY,OACZf,SAAUA,GAAYQ,EACtByB,cAAc,GAGXL,EAAQ5B,UACR4B,EAAQI,OAEThC,EACFa,KAAkBZ,EAAS,CAACqB,KAAMC,EAAAA,EAAAA,SAAiBC,QAASI,IAE3Df,KAlCoB,WACvB,IAAMC,EAAeN,EAAaO,OAIlC,OAFAL,GAAyBI,GAElBA,EAAaf,MACrB,CA4BsBmC,IAAuBjC,EAAS,CAACqB,KAAMC,EAAAA,EAAAA,SAAiBC,QAASI,IAGtFP,IACAd,IACAK,IACD,EAED,OACE,iCACE,gBACEuB,UAAU,oBACVC,QAAS,kBAAMf,GAAN,KAEX,gBAAKc,UAAU,QAAf,UACE,iBAAKA,UAAU,iBAAf,WACE,eAAIA,UAAU,eAAd,2BACA,mBACEA,UAAU,oBACVC,QAAS,kBAAMf,GAAN,KAEX,kBACEc,UAAU,cACVE,SAAU,SAACX,GAAD,OAAOD,EAAaC,EAApB,EAFZ,WAGE,kBACEY,QAAQ,OACRH,UAAU,eAFZ,oBAGA,kBACEb,KAAK,OACLU,KAAK,OACLH,GAAG,OACHU,IAAKvB,EACLxB,MAAOW,EACPqC,SAAUlC,EACVmC,MAAOrC,EAAgB,CAACsC,OAAQ,sBAAmBC,EACnDR,UAAU,kBACZ,kBACEG,QAAQ,WACRH,UAAU,eAFZ,wBAGA,kBACEb,KAAK,OACLU,KAAK,WACLH,GAAG,WACHrC,MAAOQ,GAAYQ,EACnB2B,UAAU,eACVM,MAAOhC,EAAuB,CAACiC,OAAQ,sBAAmBC,EAC1DH,SAAU7B,KACZ,mBACEW,KAAK,SACLa,UAAU,gBAFZ,2BAQX,C","sources":["hooks/useInput.ts","components/modal/Modal.tsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst CHARACTERS_LIMIT = 25;\r\n\r\nconst useInput = (initialValue: string) => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const [hasError, setHasError] = useState(false);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const inputValue = event.target.value;\r\n\r\n    setHasError(false);\r\n\r\n    if (inputValue.length >= CHARACTERS_LIMIT) {\r\n      return;\r\n    }\r\n\r\n    setValue(inputValue);\r\n  };\r\n\r\n  const clearInput = () => {\r\n    setValue('');\r\n  };\r\n\r\n  return [value, hasError, setHasError, handleChange, clearInput] as const;\r\n};\r\n\r\nexport { useInput };","import React, { FC, useEffect, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { useInput } from '../../hooks/useInput';\r\n\r\nimport { Action } from '../../types/enums/Action';\r\nimport { INote } from '../../types/INote';\r\n\r\nimport './modal.scss';\r\n\r\ntype Props = {\r\n  password?: string\r\n}\r\n\r\nconst Modal: FC<Props> = ({ password }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [\r\n    title,\r\n    hasTitleError,\r\n    setHasTitleError,\r\n    handleTitleChange,\r\n    clearTitle,\r\n  ] = useInput('');\r\n\r\n  const [\r\n    userPassword,\r\n    hasUserPasswordError,\r\n    setHasUserPasswordError,\r\n    handleUserPasswordChange,\r\n    clearUserPassword,\r\n  ] = useInput('');\r\n  \r\n  const validateName = (): number | undefined => {\r\n    const trimmedValue = title.trim();\r\n    \r\n    if (!trimmedValue) return;\r\n    \r\n    setHasTitleError(!trimmedValue);\r\n    \r\n    return trimmedValue.length;\r\n  };\r\n  \r\n  const validatePassword = (): number | undefined => {\r\n    const trimmedValue = userPassword.trim();\r\n    \r\n    setHasUserPasswordError(!trimmedValue);\r\n    \r\n    return trimmedValue.length;\r\n  };\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current?.focus();\r\n  }, []);\r\n\r\n  const closeModal = (): void => { \r\n    dispatch({type: Action.TOGGLE_SHOWMODAL, payload: false});\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n\r\n    const newNote: INote = {\r\n      id: Date.now(),\r\n      name: title.trim(),\r\n      password: password || userPassword,\r\n      showPassword: false\r\n    }\r\n\r\n    if (!newNote.password) return;\r\n    if (!newNote.name) return;\r\n\r\n    if (password) {\r\n      validateName() && dispatch({type: Action.ADD_NOTE, payload: newNote});\r\n    } else {\r\n      (validateName() && validatePassword()) && dispatch({type: Action.ADD_NOTE, payload: newNote});\r\n    }\r\n\r\n    closeModal();\r\n    clearTitle();\r\n    clearUserPassword();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div \r\n        className=\"modal--background\"\r\n        onClick={() => closeModal()}>\r\n      </div>\r\n      <div className=\"modal\">\r\n        <div className=\"modal__content\">\r\n          <h2 className='modal__title'>Add password</h2>\r\n          <button \r\n            className='modal__close-icon'\r\n            onClick={() => closeModal()}>\r\n          </button> \r\n          <form \r\n            className='modal__form' \r\n            onSubmit={(e) => handleSubmit(e)}>\r\n            <label \r\n              htmlFor=\"name\"\r\n              className='modal__label'>Name:</label>\r\n            <input \r\n              type=\"text\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              ref={inputRef}\r\n              value={title}\r\n              onChange={handleTitleChange}\r\n              style={hasTitleError ? {border: '1px solid red'} : undefined}\r\n              className='modal__input' />\r\n            <label \r\n              htmlFor=\"password\"\r\n              className='modal__label'>Password:</label>\r\n            <input \r\n              type=\"text\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              value={password || userPassword}\r\n              className='modal__input'\r\n              style={hasUserPasswordError ? {border: '1px solid red'} : undefined}\r\n              onChange={handleUserPasswordChange}/>\r\n            <button \r\n              type=\"submit\"\r\n              className='modal__button'>ADD</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Modal;"],"names":["useInput","initialValue","useState","value","setValue","hasError","setHasError","event","inputValue","target","length","password","dispatch","useDispatch","title","hasTitleError","setHasTitleError","handleTitleChange","clearTitle","userPassword","hasUserPasswordError","setHasUserPasswordError","handleUserPasswordChange","clearUserPassword","validateName","trimmedValue","trim","inputRef","useRef","useEffect","current","focus","closeModal","type","Action","payload","handleSubmit","e","preventDefault","newNote","id","Date","now","name","showPassword","validatePassword","className","onClick","onSubmit","htmlFor","ref","onChange","style","border","undefined"],"sourceRoot":""}